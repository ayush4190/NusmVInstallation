-- Power window simulation demonstration using NUSMV
-- Assumptions
-- 1. Every second the window moves 2 frames hence the total length of the window is covered in 2 frames.
-- 2. If any obstacle is encountered we move the window down by 2 frames.
-- 3. Figure out the logic behind the countinous press and counter to keep track of it.
-- 4. how to reset the countinous press trigger

MODULE main
VAR
postion: 0 .. 10;
obstacle : boolean;
passengerButtonUp : boolean;
passengerButtonDown : boolean;
driverUp: boolean ;
driverDown: boolean;
continuouspressUp : boolean;
continuouspressDown : boolean;
passengerContinousUp : boolean;
passengerContinousDown : boolean ;
counter : 0 .. 10;


ASSIGN
init(postion) :=0;
init(counter) :=0;
init(continuouspressDown):= FALSE;
init(continuouspressUp) :=FALSE;
init(passengerContinousDown) :=FALSE;
init(passengerContinousUp) :=FALSE;

TRANS
case
-- considering all the cases with obstacles as obstacles has higher priority

(obstacle & driverUp) & (postion != 0) : next(postion) = postion - 2 & next(counter) = 0;

obstacle & driverDown : next(postion) = postion + 0  & next(counter) = 0;

(obstacle & passengerButtonUp) & (postion != 0) : next(postion)= postion - 2  & next(counter) = 0;
--
obstacle & passengerButtonDown : next(postion) = postion + 0 & next(counter) = 0;


-- considering all the cases with driver side as priority

-- implementing the continous press 

driverUp & next(driverUp) & (postion != 10) : (next(postion) = postion + 2 )  & (next(continuouspressUp) = TRUE); 

continuouspressUp & (postion != 10) : (next(counter) = counter + 1) & (next(postion) = postion + 2); -- counter added

driverUp & (postion != 10) : next(postion) = postion + 2;
-- how to keep track of the counter in the driverDown condition
driverDown & next(driverDown) : next(postion) = postion - 2 & next(continuouspressDown) = TRUE ; 

continuouspressDown : next(postion) = postion -2  & next(counter) = counter + 1;  -- counter added

--
driverDown  & (postion != 0): next(postion) = postion - 2;


--considering all the cases with passenger side

--counter needs to be implemented

passengerButtonUp & next(passengerButtonUp) & (postion != 10): (next(postion) = postion + 2) & (next(passengerContinousUp) = TRUE);

passengerContinousUp : (next(postion) = postion + 2) & next(counter)= counter + 1; --counter added

passengerButtonUp  & (postion != 10) : next(postion) = postion + 2 ;

passengerButtonDown & next(passengerButtonDown) : (next(postion) = postion - 2) & (next(passengerContinousDown) = TRUE); 

passengerContinousDown  : next(postion) = postion - 2 & next(counter)= counter + 1 ;  --counter added

passengerButtonDown  & (postion != 0) : next(postion) = postion - 2 ;

TRUE: next(postion) = postion + 0;
esac;


-- LTLSPEC

LTLSPEC F((!obstacle & (passengerButtonUp | driverUp)) -> postion = 2);

LTLSPEC G ((!obstacle & driverUp & continuouspressUp) -> (postion != 10));

LTLSPEC F(obstacle & (driverUp  | passengerButtonUp) -> postion = 10);

LTLSPEC F(!obstacle & (continuouspressUp & counter <= 5) -> postion = 10);

LTLSPEC F(!obstacle -> (postion = 10 | postion = 0));

LTLSPEC F(!obstacle & postion =10 -> counter <= 5);

LTLSPEC F(!obstacle & postion =0 -> counter <= 5);

LTLSPEC F(!obstacle & driverUp -> postion = 12);



